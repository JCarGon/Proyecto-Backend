openapi: 3.1.0
info:
  version: "1.0.0"
  title: "Frikilevel API"
paths:
  /v1/login:
    post:
      tags:
        - Auth
      summary: "Login User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
            example:
              email: "user@example.com"
              password: "password123"
      responses:
        "200":
          description: "Successful Login"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
        "401":
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid credentials"
      security: []

  /v1/logout:
    post:
      tags:
        - Auth
      summary: "Logout User"
      responses:
        "200":
          description: "Successful Logout"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User logged out successfully"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "Internal Server Error"

  /v1/figures:
    get:
      tags:
        - List Figures/Figure (public)
      summary: "Get Figures"
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: "Filter by figure name"
        - in: query
          name: character
          schema:
            type: string
          description: "Filter by character name"
        - in: query
          name: company
          schema:
            type: string
          description: "Filter by company"
        - in: query
          name: price
          schema:
            type: string
          description: "Filter by price"
        - in: query
          name: dimensions
          schema:
            type: string
          description: "Filter by dimensions"
        - in: query
          name: material
          schema:
            type: string
          description: "Filter by material"
        - in: query
          name: brand
          schema:
            type: string
          description: "Filter by brand"
        - in: query
          name: amount
          schema:
            type: integer
          description: "Filter by amount available"
        - in: query
          name: animeName
          schema:
            type: string
          description: "Filter by associated anime name"
        - in: query
          name: page
          schema:
            type: integer
          description: "Page number for pagination"
          required: false
        - in: query
          name: pageSize
          schema:
            type: integer
          description: "Number of items per page for pagination"
          required: false
      responses:
        "200":
          description: "List of figures"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Figure"
      security: []

  /v1/figures/{id}:
    get:
      tags:
        - List Figures/Figure (public)
      summary: "Get Figure by ID"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the figure to retrieve"
      responses:
        "200":
          description: "Detailed figure information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Figure"
        "404":
          description: "Figure not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Figure not found"
      security: []

  /v1/users:
    post:
      tags:
        - Create user (public)
      summary: "Create User"
      description: "Creates a new user with the given details."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "User created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Validation error for one or more fields."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error message."
        "409":
          description: "Username or email already exists."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username or email already exists."
      security: []

  /v1/users/me:
    get:
      tags:
        - Request about logged user
      summary: "Get User Profile"
      description: "Retrieve the profile information of the currently authenticated user."
      operationId: "getUserProfile"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Successful retrieval of user profile."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized. Token is invalid or expired."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Unauthorized. Please login again."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "Internal Server Error"

    patch:
      tags:
        - Request about logged user
      summary: "Update Current User"
      description: "Allows the current user to update their profile information except for their email."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: "^[a-zA-Z0-9]{5,20}$"
                  description: "Username must be between 5 and 20 alphanumeric characters. Optional, but if provided, must be unique."
                password:
                  type: string
                  pattern: "^[a-zA-Z0-9]{6,20}$"
                  description: "Password must be between 6 and 20 alphanumeric characters. Optional."
                name:
                  type: string
                  pattern: '^[A-Za-záéíóúÁÉÍÓÚ\\s]{6,20}$'
                  description: "Name must be between 6 and 20 alphabetic characters. Optional."
                address:
                  type: string
                  pattern: '^c/\\s.+,\\s\\d+$'
                  description: 'Address must follow the format "c/ ..., number". Optional.'
                cp:
                  type: string
                  pattern: '^\\d{5}$'
                  description: "Postal code must contain exactly 5 digits. Optional."
                city:
                  type: string
                  pattern: '^[A-Za-záéíóúÁÉÍÓÚ\\s]{4,20}$'
                  description: "City must be between 4 and 20 alphabetic characters. Optional."
                tlf:
                  type: string
                  pattern: '^\\d{9}$'
                  description: "Phone number must contain exactly 9 digits. Optional."
              required: []
      responses:
        "200":
          description: "User profile updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Validation error for one or more fields."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error message."
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "409":
          description: "Username already exists."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already exists."

    delete:
      tags:
        - Request about logged user
      summary: "Delete User Account"
      description: "Deletes the currently authenticated user's account."
      operationId: "deleteUserAccount"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User account successfully deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /v1/users/me/purchases:
    get:
      tags:
        - Request about logged user
      summary: "Get User Purchases"
      description: "Retrieve the purchases information of the currently authenticated user."
      operationId: "getUserPurchases"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Successful retrieval of user purchases."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricalShopping"
        "401":
          description: "Unauthorized. Token is invalid or expired."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Unauthorized. Please login again."
        "404":
          description: "Purchases not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Purchases not found."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "Internal Server Error"

  /v1/cart/{id}:
    post:
      tags:
        - Request about user's cart
      summary: "Add Figure to Favourites"
      description: "Adds a specified figure to the user's favourites or cart."
      operationId: "addFigureToFavourites"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the figure to add to favourites."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Figure added to favourites successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Figure"
        "400":
          description: "There is no stock for the requested figure."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "There is no stock."
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "Not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "409":
          description: "Figure already exists in favourites."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Figure already exists in favourites."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

    delete:
      tags:
        - Request about user's cart
      summary: "Remove Figure from Favourites"
      description: "Removes a specified figure from the user's favourites or cart."
      operationId: "removeFigureFromFavourites"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the figure to remove from favourites."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Figure removed from favourites successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Figure"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "User not found or figure does not exist in favourites."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Figure does not exist in favourites."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /v1/cart/confirmOrder:
    post:
      tags:
        - Request about user's cart
      summary: "Confirm Order"
      description: "Confirms the order for the currently authenticated user, using their favourite figures list as the order items."
      operationId: "confirmOrder"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  description: "Shipping address for the order."
              required:
                - address
      responses:
        "200":
          description: "Order confirmed successfully. The user's favourites list is cleared, and a new purchase record is created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricalShopping"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: "Internal Server Error or unable to complete the order due to stock issues."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error or stock issue."

  /v1/admin/users:
    get:
      tags:
        - Request as admin about users
      summary: "Get Users List"
      description: "Retrieves a list of users, optionally filtered by name."
      operationId: "getUsersList"
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: "Optional name to filter the users by."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "A list of users."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

    post:
      tags:
        - Request as admin about users
      summary: "Create User as Admin"
      description: "Creates a new user with detailed validations for each field."
      operationId: "createUserAsAdmin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: "User created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "400":
          description: "Validation error on one or more fields."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error for field 'X'."
        "401":
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "500":
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error."

  /v1/admin/users/{id}:
    get:
      tags:
        - Request as admin about users
      summary: "Get User Details"
      description: "Retrieves details of a specific user by ID."
      operationId: "getUserDetails"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the user to retrieve."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User details retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

    patch:
      tags:
        - Request as admin about users
      summary: "Update User as Admin"
      description: "Allows an admin to update details for a specific user. Certain fields have validations and the email cannot be modified."
      operationId: "updateUserAsAdmin"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the user to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Validation error or attempt to modify email."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error message."
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "409":
          description: "Username already exists."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already exists."
        "401":
          description: "Unauthorized access."
        "500":
          description: "Internal Server Error."

    delete:
      tags:
        - Request as admin about users
      summary: "Delete User as Admin"
      description: "Allows an admin to delete a specific user by ID."
      operationId: "deleteUserAsAdmin"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the user to be deleted."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User successfully deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error."

  /v1/admin/purchases:
    get:
      tags:
        - Request as admin about users
      summary: "Get Purchases List"
      description: "Retrieves a list of purchases."
      operationId: "getPurchasesList"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "A list of purchases."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HistoricalShopping"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /v1/admin/purchases/{id}:
    get:
      tags:
        - Request as admin about users
      summary: "Get Purchase Details"
      description: "Retrieves details of a specific purchase by ID."
      operationId: "getPurchaseDetails"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the purchase to retrieve."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Purchase details retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricalShopping"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "Purchase not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Purchase not found."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /v1/admin/figures:
    post:
      tags:
        - Request as admin about figures
      summary: "Create Figure as Admin"
      description: "Creates a new figure with the provided data, ensuring all fields meet alphanumeric requirements."
      operationId: "createFigureAsAdmin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Figure"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: "Figure created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Figure"
        "400":
          description: "Validation error on one or more fields."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error for field 'X'."
        "401":
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "500":
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error."

  /v1/admin/figures/{id}:
    patch:
      tags:
        - Request as admin about figures
      summary: "Update Figure as Admin"
      description: "Updates an existing figure with the provided data, ensuring all fields meet specific requirements."
      operationId: "updateFigureAsAdmin"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the figure to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Figure"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Figure updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Figure"
        "400":
          description: "Validation error on one or more fields, or figure name already exists."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error for field 'X'."
        "401":
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "Figure not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Figure not found."
        "500":
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error."

    delete:
      tags:
        - Request as admin about figures
      summary: "Delete Figure as Admin"
      description: "Deletes a specific figure by ID."
      operationId: "deleteFigureAsAdmin"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the figure to delete."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Figure successfully deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Figure"
        "401":
          description: "Unauthorized access."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "Figure not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Figure not found."
        "500":
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error."

  /v1/messages:
    post:
      tags:
        - Send message to admins (public)
      summary: "Create Message"
      description: "Creates a new message with the given details."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "201":
          description: "Message created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: "Validation error for one or more fields."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error message."
        "500":
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error."
      security: []

  /v1/admin/messages:
    get:
      tags:
        - Request as admin about messages
      summary: "Get Message List"
      description: "Retrieves a list of messages, optionally filtered by email."
      operationId: "getMessagesList"
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: "Optional email to filter the messages by."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "A list of messages."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /v1/admin/messages/{id}:
    get:
      tags:
        - Request as admin about messages
      summary: "Get Message Details"
      description: "Retrieves details of a specific message by ID."
      operationId: "getMessageDetails"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the message to retrieve."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Message details retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: "Unauthorized. Token is invalid or missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized. Please login again."
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          description: "User's email address, unique across the system."
        password:
          type: string
          format: password
          description: "User's password for authentication."
        username:
          type: string
          description: "User's unique username."
        rol:
          type: string
          default: "user"
          description: "User's role within the system."
        name:
          type: string
          description: "User's full name."
        address:
          type: string
          description: "User's address."
        cp:
          type: string
          description: "User's postal code."
        city:
          type: string
          description: "User's city."
        tlf:
          type: string
          description: "User's telephone number."
        userCart:
          type: array
          items:
            $ref: "#/components/schemas/Figure"
          description: "List of user's favourite figures."
      required:
        - email
        - password
        - username
        - name
        - address
        - cp
        - city
        - tlf
      example:
        email: "user@example.com"
        password: "SecurePassword123"
        username: "user123"
        rol: "user"
        name: "John Doe"
        address: "c/ street, 22"
        cp: "12345"
        city: "Anytown"
        tlf: "123456789"
        userCart: []

    Figure:
      type: object
      properties:
        name:
          type: string
          description: "Name of the figure."
        character:
          type: string
          description: "Character the figure represents."
        company:
          type: string
          description: "Company that manufactures the figure."
        price:
          type: number
          format: float
          description: "Price of the figure."
        dimensions:
          type: string
          description: "Dimensions of the figure."
        material:
          type: string
          description: "Material of the figure."
        brand:
          type: string
          description: "Brand of the figure."
        principalImage:
          type: string
          description: "Primary image of the figure."
        images:
          type: array
          items:
            type: string
          description: "Array of image URLs for the figure."
        amount:
          type: number
          format: int32
          description: "Available stock for the figure."
        animeName:
          type: string
          description: "Anime associated with the figure."
      required:
        - name
        - character
        - company
        - price
        - dimensions
        - material
        - brand
        - principalImage
        - amount
        - animeName
      example:
        name: "Figure Name"
        character: "Character Name"
        company: "Company Name"
        price: 99.99
        dimensions: "10x5x5"
        material: "PVC"
        brand: "Brand Name"
        principalImage: "image1.jpg"
        images: ["image2.jpg", "image3.jpg"]
        amount: 100
        animeName: "Anime Name"

    HistoricalShopping:
      type: object
      properties:
        userId:
          type: string
          description: "Reference to the User who made the purchase."
        shippingAddress:
          type: string
          description: "Shipping address for the order."
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
          description: "List of products in the shopping history."
        totalPrice:
          type: number
          format: float
          description: "Total price of the order."
      required:
        - userId
        - shippingAddress
        - products
        - totalPrice
      example:
        userId: "507f1f77bcf86cd799439011"
        shippingAddress: "c/ street, 11"
        products:
          - productId: "507f1f77bcf86cd799439011"
            figureName: "Super Action Figure"
            price: 29.99
        totalPrice: 59.98

    Product:
      type: object
      properties:
        productId:
          type: string
          description: "Reference to the Figure being purchased."
        figureName:
          type: string
          description: "Name of the figure."
        price:
          type: number
          format: float
          description: "Price of the figure in the order."
      required:
        - productId
        - figureName
        - price
      example:
        productId: "507f1f77bcf86cd799439011"
        figureName: "Super Action Figure"
        price: 29.99

    Message:
      type: object
      properties:
        name:
          type: string
          description: "User's full name."
        surnames:
          type: string
          description: "User's surnames."
        email:
          type: string
          description: "User's email."
        tlf:
          type: string
          description: "User's telephone."
        msg:
          type: string
          description: "User's message for admins."
      required:
        - name
        - surnames
        - email
        - tlf
        - msg
      example:
        name: "John"
        surnames: "Doe Gallager"
        email: "email@email.com"
        tlf: "123456789"
        msg: "Body's message about questions for admins"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
